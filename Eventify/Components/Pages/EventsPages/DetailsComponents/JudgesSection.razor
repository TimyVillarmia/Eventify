@using Eventify.Data
@using Microsoft.AspNetCore.Identity
@inject Eventify.Data.ApplicationDbContext db
@inject UserManager<ApplicationUser> UserManager

<div class="JudgesSection-Container" style="@style">

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>User Name</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in ColUsers)
            {
                <tr>
                    <td>@user.Id.Substring(0, 5) ...</td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <!-- Edit the current forecast -->
                        <button class="btn btn-primary"
                                @onclick="(() => EditUser(user))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a user -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit User</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current user -->
                    <div class="modal-body">
                        <!-- Only show Id if not a new user -->
                        @if (objUser.Id != "")
                        {
                            <p>@objUser.Id</p>
                        }
                        <!-- Only allow edit if a new user -->
                        @if (objUser.Id != "")
                        {
                            <p>@objUser.UserName</p>
                        }
                        else
                        {
                            <input class="form-control" type="text"
                                   placeholder="UserName"
                                   @bind="objUser.UserName" />
                        }
                        <input class="form-control" type="text"
                               placeholder="Email"
                               @bind="objUser.Email" />
                        <input class="form-control" type="password"
                               placeholder="Password"
                               @bind="objUser.PasswordHash" />
                        <br /><br />
                        <!-- Button to save the user -->
                        <button class="btn btn-primary"
                                @onclick="SaveUser">
                            Save
                        </button>
                        <!-- Only show delete button if not a new record -->
                        @if (objUser.Id != "")
                        {
                            <!-- Button to delete the forecast -->
                            <button class="btn btn-danger"
                                    @onclick="DeleteUser">
                                Delete
                            </button>
                        }
                        <br />
                        <span style="color:red">@strError</span>
                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
</div>

@code {

    [Parameter]
    public string? style { get; set; }
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        GetUsers();
    }

    public void GetUsers()
    {

        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        var user = UserManager.Users.Select(x => new IdentityUser
            {
                Id = x.Id,
                UserName = x.UserName,
                Email = x.Email,
                PasswordHash = "*****"
            });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }

    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // To be implemented later...
            }
            else
            {
                // Insert new user
                var NewUser =
                    new ApplicationUser
                        {
                            UserName = objUser.UserName,
                            Email = objUser.Email
                        };
                var CreateResult =
                    await UserManager
                    .CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                        .Errors
                        .FirstOrDefault() != null)
                    {
                        strError =
                            CreateResult
                            .Errors
                            .FirstOrDefault()
                            .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }

            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }

    async Task EditUser(IdentityUser _IdentityUser)
    {
    }
    async Task DeleteUser()
    {
        
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }

}
