@page "/events/create"
@layout Eventify.Components.Layout.ModalLayout
@inject Eventify.Data.ApplicationDbContext DB
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject IdentityUserAccessor UserAccessor

@using Eventify.Common
@using Eventify.Components.Account
@using Eventify.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>Create</PageTitle>
<div class="Event-Creation-wrapper">
    <h1 style="margin:0 0 10px 0;">Events Creation</h1>
    <div class="Event-Creation-Form-Container">
        <EditForm method="post" Model="Events" OnValidSubmit="AddEvents" FormName="create" Enhance style="width:100%;">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="EventNameInput-Container field">
                <label for="eventname" class="form-label">Event Name:</label>
                <InputText id="eventname" @bind-Value="Events.EventName" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                <ValidationMessage For="() => Events.EventName" class="text-danger" />
            </div>
            <div class="DateTime-Picker field">
                <div class="mb-3 DatePicker" style="">
                    <label for="date" class="form-label">Date:</label>
                    <InputDate id="date" @bind-Value="Events.Date" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;width:100%;" />
                    <ValidationMessage For="() => Events.Date" class="text-danger" />
                </div>
                <div class="TimePickers" style="">
                    <div class="mb-3" style="display:flex;flex-direction:column;margin:0 1rem 0 0;">
                        <label for="starttime" class="form-label">Start Time:</label>
                        <InputDate Type="InputDateType.Time" id="starttime" @bind-Value="Events.StartTime" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                        <ValidationMessage For="() => Events.StartTime" class="text-danger" />
                    </div>
                    <div class="mb-3" style="display:flex;flex-direction:column;">
                        <label for="starttime" class="form-label">End Time:</label>
                        <InputDate Type="InputDateType.Time" id="endtime" @bind-Value="Events.EndTime" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                        <ValidationMessage For="() => Events.EndTime" class="text-danger" />
                    </div>
                </div>
            </div>
            <div class="Event-Venue field" style="display:flex;flex-direction:column;">
                <label for="venue" class="form-label">Venue:</label>
                <InputText id="venue" @bind-Value="Events.Venue" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                <ValidationMessage For="() => Events.Venue" class="text-danger" />
            </div>
            <div class="create-events-formButtons">
                <a href="home" type="button" class="creat-events-cancelbutton">Cancel</a>
                <button type="submit" class="creat-events-savebutton">Save</button>
            </div>
        </EditForm>

    </div>

</div>

@code {

    [SupplyParameterFromForm]
    public Events Events { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    private ApplicationUser user = default!;





    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddEvents()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        

        string status = "";

        if (DateTime.Now < Events.Date)
        {
            status = "Scheduled";
        }
        else if (DateTime.Now >= Events.Date)
        {
            status = "Ongoing";
        }
        else if (DateTime.Now > Events.Date)
        {
            status = "Completed";
        }

        Events.Status = status;
        Events.ACCESS_CODE = AccessCode.CreateAccessCode();
        DB.Events.Add(Events);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/home");
    }
}
