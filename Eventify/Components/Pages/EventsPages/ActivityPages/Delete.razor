@page "/{Event_Id}/activities/delete"
@layout Eventify.Components.Layout.ModalLayout
@inject Eventify.Data.ApplicationDbContext DB
@using Eventify.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<div class="Delete-Container">
    <div class="Delete-Details">
    <h1>Delete Activity</h1>

    <h3>Are you sure you want to delete this?</h3>
    <div>
        <h4>Activity</h4>
        <hr />
        @if (activity is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <dl class="row">
                <dt class="col-sm-2">Name</dt>
                <dd class="col-sm-10">@activity.Name</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Date</dt>
                <dd class="col-sm-10">@activity.Date</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">StartTime</dt>
                <dd class="col-sm-10">@activity.StartTime</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">EndTime</dt>
                <dd class="col-sm-10">@activity.EndTime</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Venue</dt>
                <dd class="col-sm-10">@activity.Venue</dd>
            </dl>


            
                    <div class="create-events-formButtons">
                        <a href="@($"events/details?id={Event_Id}")" class="creat-events-cancelbutton">Cancel</a>
                        <button @onclick="DeleteActivity" class="creat-events-savebutton" disabled="@(activity is null)">Confirm</button>
                   </div> 
            
        }
    </div>
</div>
</div>


@code {
    Activity? activity;

    [SupplyParameterFromQuery]
    public int Id { get; set; }
    
    [Parameter]
    public string Event_Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        activity = await DB.Activity.FirstOrDefaultAsync(m => m.Id == Id);

        if (activity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteActivity()
    {
        DB.Activity.Remove(activity!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo($"/events/details?id={Event_Id}");
    }
}
