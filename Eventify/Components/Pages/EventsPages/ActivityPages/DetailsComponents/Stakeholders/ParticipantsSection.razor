@using Eventify.Data
@using Microsoft.EntityFrameworkCore

@inject Eventify.Data.ApplicationDbContext DB


<div class="ParticipantsSection-Container" style="@style">

    <table class="table">
        <thead>
            <tr>
                <th>Entry#:</th>
                <th>Participant Name</th>
                <th>Course</th>
                <th>Section</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var participant in RowParticipants)
            {
                <tr>
                    <td>@participant.EntryNumber</td>
                    <td>@participant.Name</td>
                    <td>@participant.Course</td>
                    <td>@participant.Section</td>
                    <td>
                        <!-- Edit the current forecast -->
                        <button class="btn btn-primary"
                                @onclick="(() => EditParticipant(participant))">
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (ShowPopup)
    {
        <!-- This is the popup to create or edit a user -->
        <div class="modal" tabindex="-1" style="display:block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit User</h3>
                        <!-- Button to close the popup -->
                        <button type="button" class="close"
                                @onclick="ClosePopup">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>
                    <!-- Edit form for the current user -->
                    <div class="modal-body">
                        <EditForm Model="Participant" method="post" OnValidSubmit="SaveParticipant" FormName="register">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="inputbox">
                                <InputText @bind-Value="Participant.EntryNumber" aria-required="true" placeholder="Entry number" />
                            </div>
                            <div class="inputbox">
                                <InputText @bind-Value="Participant.Name" aria-required="true" placeholder="Enter participant's name" />
                            </div>
                            <div class="inputbox">
                                <InputText @bind-Value="Participant.Course" aria-required="true" placeholder="Enter participant's course" />
                            </div>
                            <div class="inputbox">
                                <InputText @bind-Value="Participant.Section" aria-required="true" placeholder="Enter participant's section" />
                            </div>
                            <button type="submit" class="btn-create">Save</button>
                            <!-- Only show delete button if not a new record -->
                            @if (Participant.Id != 0)
                            {
                                <!-- Button to delete the forecast -->
                                <button class="btn btn-danger"
                                        @onclick="DeleteParticipant">
                                    Delete
                                </button>
                            }
                        </EditForm>


                    </div>
                </div>
            </div>
        </div>
    }
    <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
</div>

@code {


    [Parameter]
    public string? style { get; set; }

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [Parameter]
    public Activity? Activity { get; set; }

    List<Participants> RowParticipants = new List<Participants>();



    // Property used to add or edit the currently selected user
    [SupplyParameterFromForm]
    public Participants? Participant { get; set; } = new();

    // To enable showing the Popup
    bool ShowPopup = false;

    protected override void OnInitialized()
    {
        GetParticipants();

    }

    public void GetParticipants()
    {
        RowParticipants = new List<Participants>();

        var participants = DB.Participants.Where(x => x.ActivityID == Id);
        foreach (var item in participants)
        {
            RowParticipants.Add(item);
        }

    }
    public async Task SaveParticipant()
    {

        // Is this an existing user?
        if (Participant.Id != 0)
        {
            DB.Participants.Update(Participant);
            await DB.SaveChangesAsync();
        }
        else
        {
            Participant.Activity = Activity;
            DB.Participants.Add(Participant);
            await DB.SaveChangesAsync();
            
        }

        ShowPopup = false;
        GetParticipants();

    }

    void EditParticipant(Participants participants)
    {
        // Set the selected user
        // as the current user
        Participant = participants;
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteParticipant()
    {

        // Close the Popup
        ShowPopup = false;
        DB.Participants.Remove(Participant);
        await DB.SaveChangesAsync();

        // Refresh Users
        GetParticipants();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewUser()
    {
        Participant = new Participants();
        Participant.Id = 0;
        // Open the Popup
        ShowPopup = true;
    }


}
