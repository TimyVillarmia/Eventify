@using Eventify.Data
@inject ApplicationDbContext db
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer


<div style="width:100%;height:auto;border:1px solid black;display:flex;flex-direction:column;padding:2rem;box-sizing:border-box;">
    <div style="display:flex;flex-direction:row;justify-content:space-between;width:100%;">
        <h3>Judges</h3>
        <button @onclick="DoneClicked" style="@display">Done</button>
        <button @onclick="AddJudgesClicked">Assign Judges</button>
    </div>
    <div style="width:100%;overflow:auto;@display">
        <table>
            @{

                foreach (var judge in UnAssignedUsers)
                {
                    <tr>
                        <td>@judge.Email</td>
                        <td>
                            <button @onclick="() => {

                            AssignJudge(judge);
                            StateHasChanged();

                        }">
                                Assign
                            </button>
                        </td>
                    </tr>
                }
            }
            
        </table>
    </div>
    <div style="display:flex;flex-direction:column;">
        @foreach (var judge in JudgeActivities)
        {
            <h2>@judge.Email</h2>
        }
    </div>
</div>

@code {
    List<ApplicationUser> JudgeActivities = new();
    List<ApplicationUser> UnAssignedUsers = new();

    [Parameter]
    public Activity? Activity { get; set; }

    string? display { get; set; } = "display:none;";

    protected override void OnInitialized()
    {

        ReloadData();
    }

    void ReloadData()
    {
        var assignedJudgesExcept = from user in db.Users
                                   join userRole in db.UserRoles on user.Id equals userRole.UserId
                                   join role in db.Roles on userRole.RoleId equals role.Id
                                   join ja in db.JudgeActivity on user.Id equals ja.User.Id
                                   where role.Name == "Judge" && ja.ActivityID == Activity.Id
                                   select user;

        var allJudges = from user in db.Users
                        join userRole in db.UserRoles on user.Id equals userRole.UserId
                        join role in db.Roles on userRole.RoleId equals role.Id
                        where role.Name == "Judge"
                        select user;

        JudgeActivities = assignedJudgesExcept.ToList();
        UnAssignedUsers = allJudges.Except(assignedJudgesExcept).ToList();
    }

    void AssignJudge(ApplicationUser judge)
    {

        var judgeActivity = new JudgeActivity();
        judgeActivity.User = judge;
        judgeActivity.ActivityID = Activity.Id;

        db.JudgeActivity.Add(judgeActivity);
        db.SaveChanges();
        ReloadData();

    }
    void AddJudgesClicked()
    {
        display = "display:block;";
    }
    void DoneClicked()
    {
        display = "display:none;";
    }

}
