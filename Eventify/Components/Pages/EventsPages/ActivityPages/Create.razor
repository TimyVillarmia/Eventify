@page "/{Event_Id}/activities/create"
@layout Eventify.Components.Layout.ModalLayout
@inject Eventify.Data.ApplicationDbContext DB
@using Eventify.Data
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<div class="ActivityCreation-Container" style="">
    <h1>Create Activity</h1>
    <EditForm method="post" Model="Activity" OnValidSubmit="AddActivity" FormName="create" Enhance style="display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%;padding:2rem;box-sizing:border-box;border: solid 1px black;border-radius: 10px;">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        <div class="mb-3" style="display:flex;flex-direction:column;justify-content:start;align-items:start;width:100%;margin:0 0 1rem 0;">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" @bind-Value="Activity.Name" class="form-control" style="width:100%;padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
            <ValidationMessage For="() => Activity.Name" class="text-danger" />
        </div>
        <div class="mb-3" style="display:flex;flex-direction:column;justify-content:start;align-items:start;width:100%;margin:0 0 1rem 0;">
            <label for="date" class="form-label">Date:</label>
            <InputDate id="date" @bind-Value="Activity.Date" class="form-control" style="width:100%;padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
            <ValidationMessage For="() => Activity.Date" class="text-danger" />
        </div>
        <div class="mb-3" style="display:flex;flex-direction:column;justify-content:start;align-items:start;width:100%;margin:0 0 1rem 0;">
            <label for="starttime" class="form-label">StartTime:</label>
            <InputDate Type="InputDateType.Time" id="starttime" @bind-Value="Activity.StartTime" class="form-control" style="width:100%;padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
            <ValidationMessage For="() => Activity.StartTime" class="text-danger" />
        </div>
        <div class="mb-3" style="display:flex;flex-direction:column;justify-content:start;align-items:start;width:100%;margin:0 0 1rem 0;">
            <label for="endtime" class="form-label">EndTime:</label>
            <InputDate Type="InputDateType.Time" id="endtime" @bind-Value="Activity.EndTime" class="form-control" style="width:100%;padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
            <ValidationMessage For="() => Activity.EndTime" class="text-danger" />
        </div>
        <div class="mb-3" style="display:flex;flex-direction:column;justify-content:start;align-items:start;width:100%;margin:0 0 1rem 0;">
            <label for="venue" class="form-label">Venue:</label>
            <InputText id="venue" @bind-Value="Activity.Venue" class="form-control" style="width:100%;padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
            <ValidationMessage For="() => Activity.Venue" class="text-danger" />
        </div>
        <div style="display:flex;flex-direction:row;align-items:center;justify-content:end;width:100%;box-sizing:border-box;margin:1rem 0 0 0;">
            <a href="@($"events/details?id={Event_Id}")" type="button" style="border:none; color: #000000;padding: 0 1rem;font-size: 20px;background-color: transparent;
    cursor: pointer;text-decoration:none;">Cancel</a>
            <button type="submit" style="border:none; color: #2342C0;padding: 0 1rem;font-size: 20px;background-color: transparent;
    cursor: pointer;text-decoration:none;">
                Save
            </button>
        </div>
    </EditForm>

</div>
    

@code {

    [SupplyParameterFromForm]
    public Activity Activity { get; set; } = new();

    [Parameter]
    public string? Event_Id { get; set; }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddActivity()
    {
        Activity.Event = DB.Events.FirstOrDefault(x => x.Id == Int32.Parse(Event_Id));
        DB.Activity.Add(Activity);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo($"events/details?id={Event_Id}", forceLoad: true);
    }

    void Cancel()
    {
        NavigationManager.NavigateTo($"events/details?id={int.Parse(Event_Id)}");
    }
}
