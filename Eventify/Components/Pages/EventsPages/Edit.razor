@page "/Events/edit"
@layout Eventify.Components.Layout.ModalLayout
@inject Eventify.Data.ApplicationDbContext DB
@using Eventify.Data
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Edit</PageTitle>
<div class="Edit-Container-wrapper">

        <h1 style="margin:0 0 10px 0;">Modify Content</h1>

        @if (Events is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
        <div class="Edit-Container-Form-Container">
                <div class="row">
                <EditForm method="post" Model="Events" OnValidSubmit="UpdateEvents" FormName="edit" Enhance style="width:100%;">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <input type="hidden" name="Events.Id" value="@Events.Id" />
                    <div class="ActivityNameInput-Container field">
                            <label for="eventname" class="form-label">EventName:</label>
                        <InputText id="eventname" @bind-Value="Events.EventName" class="form-control" style="width: 100%; padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                            <ValidationMessage For="() => Events.EventName" class="text-danger" />
                        </div>
                        @* <div class="mb-3">
                            <label for="status" class="form-label">Status:</label>
                        <InputText id="status" @bind-Value="Events.Status" class="form-control" style="width: 100%; padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                            <ValidationMessage For="() => Events.Status" class="text-danger" />
                        </div> *@
                    <div class="DateTime-Picker field" style="margin-top: 1rem;">
                        <div style="margin:0 1rem 0 0;">
                                <label for="date" class="form-label">Date:</label>
                            <InputDate id="date" @bind-Value="Events.Date" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;width:100%;margin-right:1rem" />
                                <ValidationMessage For="() => Events.Date" class="text-danger" />
                            </div>

                        <div class="TimePickers">
                            <div class="mb-3" style="display:flex;flex-direction:column;margin:0 1rem 0 0;">
                                <label for="starttime" class="form-label">StartTime:</label>
                                <InputDate Type="InputDateType.Time" id="starttime" @bind-Value="Events.StartTime" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px; " />
                                <ValidationMessage For="() => Events.StartTime" class="text-danger" />
                            </div>
                            <div class="mb-3" style="display:flex;flex-direction:column;">
                                <label for="endtime" class="form-label">EndTime:</label>
                                <InputDate Type="InputDateType.Time" id="endtime" @bind-Value="Events.EndTime" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                                <ValidationMessage For="() => Events.EndTime" class="text-danger" />
                            </div>

                        </div>
                        </div>
                    <div class="Event-Venue field" style="display:flex;flex-direction:column;">
                            <label for="venue" class="form-label">Venue:</label>
                        <InputText id="venue" @bind-Value="Events.Venue" class="form-control" style="padding: 1rem 9px;box-sizing:border-box;border-radius:10px; border-width:1px;" />
                            <ValidationMessage For="() => Events.Venue" class="text-danger" />
                        </div>
                    <div class="create-events-formButtons">
                        <a href="/home" class="creat-events-cancelbutton">Cancel</a>
                        <button type="submit" class="creat-events-savebutton">Save</button>
                        </div>
                        
                    </EditForm>
                </div>
        </div>
        }

</div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Events? Events { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Events ??= await DB.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (Events is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateEvents()
    {
        DB.Attach(Events!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EventsExists(Events!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/home");
    }

    bool EventsExists(int id)
    {
        return DB.Events.Any(e => e.Id == id);
    }
}
