@page "/events/details"
@inject Eventify.Data.ApplicationDbContext DB
@using Eventify.Data
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@rendermode InteractiveServer


<PageTitle>Details</PageTitle>
@if (events is null)
{
    <p><em>Loading...</em></p>
}
else {

    <div class="Details-Container">
        <div class="Details-Container-Header">
            <div class="TopDetails-Container">
                <img class="eventicon" src="EventDetailsIcon.png"/>
                <div style="width:auto;height:100%; display:flex;flex-direction:column;justify-content:start;margin:-7px 0 0 2rem;box-sizing:border-box;">
                    <h1 class="eventname" style="">@events.EventName</h1>
                    <h4 class="eventdate" style="">@events.Date.ToLongDateString()</h4>
                </div>
                <button type="button" style="background-color:transparent;
                                            border:none;
                                            padding:0;
                                            width: auto;
                                            height: 40px;
                                            margin-left: auto;
                                            align-content:center;
                                            cursor:pointer;">
                    <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 16 16"><g fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5"><circle cx="8" cy="2.5" r=".75" /><circle cx="8" cy="8" r=".75" /><circle cx="8" cy="13.5" r=".75" /></g></svg>
                </button>
            </div>
            <div class="BottomDetails-Container">
                <h5 style="margin-right:auto;">Venue: @events.Venue</h5>
                <div class="time-details" style="display:flex;flex-direction:row;justify-content:center;align-items:center;">
                    <h5>Start time: @events.StartTime</h5>
                    <hr />
                    <h5>End time: @events.EndTime</h5>
                </div>
                
            </div>
        </div>
        <div class="Details-ControlsNav">
            <button @onclick="@ActivitiesClicked" style="@ActivitiesBtnStyle">Activities</button>
            <button @onclick="@ResultsClicked" style="@ResultsBtnStyle">Results</button>
        </div>
        <div style="width:100%;">
            <Eventify.Components.Pages.EventsPages.DetailsComponents.ActivitiesSection Event="events" style="@ActivitiesDisplay" />
            <Eventify.Components.Pages.EventsPages.DetailsComponents.ResultsSection style="@ResultsDisplay" />
        </div>

    </div>


}


@* <h1>Details</h1>

<div>
    <h4>Events</h4>
    <hr />
    @if (events is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div>
            <QuickGrid Class="table" Items="DB.Activity">
                <PropertyColumn Property="activity => activity.Name" />
                <PropertyColumn Property="activity => activity.Date" />
                <PropertyColumn Property="activity => activity.StartTime" />
                <PropertyColumn Property="activity => activity.EndTime" />
                <PropertyColumn Property="activity => activity.Venue" />

                <TemplateColumn Context="activity">
                    <a href="@($"/{events.Id}/activities/details?id={activity.Id}")">Details</a> |
                    <a href="@($"/{events.Id}/activities/edit?id={activity.Id}")">Edit</a> |
                    <a href="@($"/{events.Id}/activities/delete?id={activity.Id}")">Delete</a>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <div>
            <a href="@($"/{events.Id}/activities/create")">Create Activity</a>
        </div>
    }
</div> *@

@code {
    Events? events;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string ActivitiesDisplay { get; set; } = "display:block;";
    private string ResultsDisplay { get; set; } = "display:none;";

    private string ActivitiesBtnStyle { get; set; } = "border: solid 1px blue;border-width:0 0 2px 0;color:black;";
    private string ResultsBtnStyle { get; set; } = "border:none;color:#8f8f8f;";

    protected override async Task OnInitializedAsync()
    {
        events = await DB.Events.FirstOrDefaultAsync(m => m.Id == Id);

        if (events is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    void ActivitiesClicked()
    {
        ActivitiesDisplay = "display:block";
        ResultsDisplay = "display:none;";

        ActivitiesBtnStyle = "border: solid 1px blue;border-width:0 0 2px 0;color:black;";
        ResultsBtnStyle = "border:none;color:#8f8f8f;";
    }
    void ResultsClicked()
    {
        ActivitiesDisplay = "display:none";
        ResultsDisplay = "display:block;";

        ActivitiesBtnStyle = "border:none;color:#8f8f8f;";
        ResultsBtnStyle = "border: solid 1px blue;border-width:0 0 2px 0;color:black;";
    }
}
