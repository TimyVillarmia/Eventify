@page "/Judge/home"
@inject Eventify.Data.ApplicationDbContext db
@using Eventify.Components.Account
@using Eventify.Data
@using Microsoft.AspNetCore.Authorization
@inject IdentityUserAccessor UserAccessor

@attribute [Authorize]

<PageTitle>Home-Activities</PageTitle>

<div style="display:flex;flex-direction:column;width:100%;height:100%;justify-content:start;align-items:start;">
    <div style="width:100%;overflow-x:auto;display:flex;flex-direction:row;justify-content:start;align-items:center;margin:1rem 0 0 0;padding:0 2rem 0 2rem;">
        <a style="text-decoration-line:none;" target="_parent" href="@($"/home")">Home</a><span style="margin:0 9px 0 9px;">/</span>
    </div>
    <div class="home-container" style="">
        @foreach (var item in Activities)
        {
            <ActivityCardView style="margin: 0 1.5rem 1.5rem 0;" Activity="item" />
        }
        @*         @for (int i = 0; i < 5; i++)
        {
        <EventCardView style="margin: 0 1.5rem 1.5rem 0;" />
        } *@

    </div>
</div>

@code{
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [Parameter]
    public ApplicationUser? user { get; set; }

    List<Events>? Events { get; set; } = new();

    [Parameter]
    public List<Activity>? Activities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        GetActivities(user);
    }
    void GetActivities(ApplicationUser user)
    {
        var JudgeActivities = from acts in db.Activity
                              join ja in db.JudgeActivity on acts.Id equals ja.ActivityID
                              join events in db.Events on acts.Event.Id equals events.Id
                              where ja.User.Id == user.Id && events.Status != "Completed"
                              select acts;

        Activities = JudgeActivities.ToList();
    }
}
