@page "/{ActivityID:int}/Judging/{ParticipantID:int}"

@using Eventify.Data
@using Eventify.Components.Account
@using Eventify.Components.Pages.HomeComponents
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject IdentityUserAccessor UserAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject Eventify.Data.ApplicationDbContext DB

<div class="judgingsheet-container" style="">
    <div class="judgingsheet-header">
        <img src="activityIcon.png" style="" />
        <h1 style="">@(($"{Activity.Name}").ToUpper())</h1>
        <div style="">
            <p>@Activity.Venue</p>
            <p>@Activity.StartTime - @Activity.EndTime</p>
        </div>
    </div>
    <div class="second-container" style="">
        <h2>Participant Entry#: @Participant.EntryNumber</h2>
        <hr style="width:100%;height:1px;background-color:black;" />
        <div class="table-container" style="">
            <table style="">
                <tr>
                    <th style="padding:1rem;background-color:#272343;color:white;border:1px solid black;">Criteria</th>
                    <th style="padding:1rem;background-color:#272343;color:white;border:1px solid black;">Rate</th>
                    <th style="padding:1rem;background-color:#272343;color:white;border:1px solid black;">Score</th>
                </tr>
                @foreach (var criteria in ActivityCriteria)
                {
                    <tr>
                        <td style="padding:1rem 2rem;border:1px solid black;">@criteria.CriteriaName</td>
                        <td style="padding:1rem 2rem;border:1px solid black;">@criteria.Weight %</td>
                        <td style="padding:1rem 2rem;border:1px solid black;">
                            <input type="number" min="0" max="@criteria.MaxScore" @bind="ParticipantScores[criteria.Id].Score" style="padding:1rem 2rem;border-radius:6px;" />
                        </td>
                    </tr>
                }
            </table>
        </div>
        <div style="display:flex;flex-direction:row;justify-content:end;align-items:center;">
            <button @onclick="GoBack" style="padding:8px 2rem;border:none;background:transparent;color:#272343;cursor:pointer;">Cancel</button>
            <button @onclick="() => {OnSave();}" type="submit" style="padding:8px 2rem;border:none;background:transparent;color:#4263eb;cursor:pointer;">Save</button>
        </div>
    </div>

</div>



@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    ApplicationUser? user { get; set; } = new();

    public double currentCriteria;

    [Parameter]
    public int? ActivityID { get; set; }

    [Parameter]
    public int? ParticipantID { get; set; }

    [Parameter]
    public Activity? Activity { get; set; } = new();


    [Parameter]
    public Participants? Participant { get; set; } = new();

    List<Criteria>? ActivityCriteria { get; set; } = new();


    Dictionary<int, ParticipantsScore> ParticipantScores { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var current = authstate.User;
        user = await UserManager.GetUserAsync(current);
        ParticipantScores.Clear();

        GetData();
    }

    void GetData()
    {

        var activity = DB.Activity.Single(i => i.Id == ActivityID);
        Activity = activity;

        var participant = DB.Participants.Single(i => i.Id == ParticipantID);
        Participant = participant;

        var criteriaList = DB.Criteria.Where(i => i.Activity == Activity);
        ActivityCriteria = criteriaList.ToList();

        var hasScores = DB.ParticipantsScores.Where(p => p.Participant == Participant).Any();
        var previous_scores = DB.ParticipantsScores.Where(p => p.Participant == Participant);

        // if participants has previous scores
        if (hasScores)
        {
            foreach (var criteria in ActivityCriteria)
            {
                // get the previous score
                ParticipantScores?.Add(criteria.Id, previous_scores.First(c => c.CriteriaId == criteria.Id));
            }
        }
        else
        {
            foreach (var criteria in ActivityCriteria)
            {
                // otherwise, create new scores
                ParticipantScores?.Add(criteria.Id, new ParticipantsScore
                    {
                        // Score = 0,
                        CriteriaId = criteria.Id,
                        Participant = Participant,
                        JudgeId = user.Id
                    });
            }
        }


    }

    async Task OnSave()
    {
        // check if participant has already scores
        var hasScores = DB.ParticipantsScores.Where(p => p.Participant == Participant).Any();

        foreach (KeyValuePair<int, ParticipantsScore> entry in ParticipantScores)
        {
            // if participant has previous scores, update
            if (hasScores)
            {
                DB.ParticipantsScores.Update(entry.Value);
                NavManager.NavigateTo($"/{ActivityID}/Participants");
            }
            else
            {
                // otherwise, add
                DB.ParticipantsScores.Add(entry.Value);
                NavManager.NavigateTo($"/{ActivityID}/Participants");
            }

        }


        await DB.SaveChangesAsync();

        GoBack();
    }

    void GoBack()
    {
        NavManager.NavigateTo($"/{ActivityID}/Participants");

    }

}
